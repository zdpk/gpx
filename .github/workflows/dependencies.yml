name: Dependencies

on:
  schedule:
    # Check for dependency updates every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

jobs:
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: package-lock.json
        
    - name: Configure Git
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
    - name: Check for dependency updates
      run: |
        # Install npm-check-updates globally
        npm install -g npm-check-updates
        
        # Check what would be updated
        ncu --format group
        
        # Update dependencies
        ncu -u
        
        # Install updated dependencies
        npm install
        
    - name: Run tests with updated dependencies
      run: |
        npm run typecheck
        npm run lint
        npm test
        npm run build
        
    - name: Check if dependencies were updated
      id: changes
      run: |
        if git diff --quiet package.json package-lock.json; then
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "has_changes=true" >> $GITHUB_OUTPUT
        fi
        
    - name: Create Pull Request
      if: steps.changes.outputs.has_changes == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update dependencies'
        title: 'ðŸ”„ Update dependencies'
        body: |
          This PR updates dependencies to their latest versions.
          
          ## Changes
          - Updated dependencies using `npm-check-updates`
          - All tests pass with updated dependencies
          
          ## Testing
          - âœ… Type checking
          - âœ… Linting
          - âœ… Unit tests
          - âœ… Build process
          
          ## Review Notes
          Please review the changes and ensure no breaking changes were introduced.
          
          ---
          *This PR was created automatically by GitHub Actions*
        branch: dependencies/auto-update
        delete-branch: true
        
    - name: Enable auto-merge
      if: steps.changes.outputs.has_changes == 'true'
      run: |
        # Get the PR number from the previous step
        PR_NUMBER=$(gh pr list --head dependencies/auto-update --json number --jq '.[0].number')
        
        # Enable auto-merge if PR was created
        if [ ! -z "$PR_NUMBER" ]; then
          gh pr merge $PR_NUMBER --auto --squash
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: |
        # Run npm audit and capture output
        npm audit --audit-level=moderate --json > audit-report.json || true
        
        # Check if there are any high or critical vulnerabilities
        CRITICAL=$(cat audit-report.json | jq '.metadata.vulnerabilities.critical // 0')
        HIGH=$(cat audit-report.json | jq '.metadata.vulnerabilities.high // 0')
        
        echo "Critical vulnerabilities: $CRITICAL"
        echo "High vulnerabilities: $HIGH"
        
        # If there are critical or high vulnerabilities, create an issue
        if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
          echo "SECURITY_ISSUES=true" >> $GITHUB_ENV
          echo "CRITICAL_COUNT=$CRITICAL" >> $GITHUB_ENV
          echo "HIGH_COUNT=$HIGH" >> $GITHUB_ENV
        else
          echo "SECURITY_ISSUES=false" >> $GITHUB_ENV
        fi
        
    - name: Create security issue
      if: env.SECURITY_ISSUES == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const auditReport = JSON.parse(fs.readFileSync('audit-report.json', 'utf8'));
          
          const vulnerabilities = auditReport.vulnerabilities || {};
          const advisories = auditReport.advisories || {};
          
          let issueBody = `## ðŸš¨ Security Vulnerabilities Detected\n\n`;
          issueBody += `- **Critical**: ${process.env.CRITICAL_COUNT}\n`;
          issueBody += `- **High**: ${process.env.HIGH_COUNT}\n\n`;
          
          issueBody += `## Affected Packages\n\n`;
          
          for (const [packageName, vuln] of Object.entries(vulnerabilities)) {
            if (vuln.severity === 'critical' || vuln.severity === 'high') {
              issueBody += `### ${packageName}\n`;
              issueBody += `- **Severity**: ${vuln.severity}\n`;
              issueBody += `- **Range**: ${vuln.range}\n`;
              
              if (vuln.via && vuln.via.length > 0) {
                for (const advisory of vuln.via) {
                  if (typeof advisory === 'object' && advisory.title) {
                    issueBody += `- **Issue**: ${advisory.title}\n`;
                    if (advisory.url) {
                      issueBody += `- **Advisory**: ${advisory.url}\n`;
                    }
                  }
                }
              }
              issueBody += `\n`;
            }
          }
          
          issueBody += `## Actions Required\n\n`;
          issueBody += `1. Review the security vulnerabilities above\n`;
          issueBody += `2. Update affected packages to secure versions\n`;
          issueBody += `3. Run \`npm audit fix\` to automatically fix issues\n`;
          issueBody += `4. Test the application after updates\n\n`;
          issueBody += `## Automation\n\n`;
          issueBody += `This issue was automatically created by the security audit workflow.\n`;
          issueBody += `Please address these vulnerabilities as soon as possible.\n`;
          
          // Check if similar issue already exists
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'security',
            state: 'open'
          });
          
          const existingIssue = issues.find(issue => 
            issue.title.includes('Security Vulnerabilities Detected')
          );
          
          if (existingIssue) {
            // Update existing issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              body: `## Updated Security Scan Results\n\n${issueBody}`
            });
          } else {
            // Create new issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸš¨ Security Vulnerabilities Detected - ${process.env.CRITICAL_COUNT} Critical, ${process.env.HIGH_COUNT} High`,
              body: issueBody,
              labels: ['security', 'bug', 'priority-high']
            });
          }